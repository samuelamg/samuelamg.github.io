<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Airmag&#39;s Notes</title>
  <subtitle>Quick notes</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-04-08T13:32:03.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Airmag</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>php输出缓存ob系列函数</title>
    <link href="http://yoursite.com/2017/04/06/php%E8%BE%93%E5%87%BA%E7%BC%93%E5%AD%98ob%E7%B3%BB%E5%88%97%E5%87%BD%E6%95%B0/"/>
    <id>http://yoursite.com/2017/04/06/php输出缓存ob系列函数/</id>
    <published>2017-04-06T12:20:00.000Z</published>
    <updated>2017-04-08T13:32:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>ob，输出缓冲区，是output buffering的简称，而不是output cache。ob用对了，是能对速度有一定的帮助，但是盲目的加上ob函数，只会增加CPU额外的负担<br>ob的基本原则：如果ob缓存打开，则echo的数据首先放在ob缓存。如果是header信息，直接放在程序缓存。当页面执行到最后，会把ob缓存的数据放到程序缓存，然后依次返回给浏览器。<br>下面我说说ob的基本作用：<br>  1)防止在浏览器有输出之后再使用setcookie()、header()或session_start()等发送头文件的函数造成的错误。其实这样的用法少用为好，养成良好的代码习惯。<br>  2)捕捉对一些不可获取的函数的输出，比如phpinfo()会输出一大堆的HTML，但是我们无法用一个变量例如$info=phpinfo();来捕捉，这时候ob就管用了。<br>  3)对输出的内容进行处理，例如进行gzip压缩，例如进行简繁转换，例如进行一些字符串替换。<br>  4)生成静态文件，其实就是捕捉整页的输出，然后存成文件。经常在生成HTML，或者整页缓存中使用。<br>对于刚才说的第三点中的GZIP压缩，可能是很多人想用，却没有真用上的，其实稍稍修改下代码，就可以实现页面的gzip压缩。<br>复制代码 代码如下:<br>ob_start(ob_gzhandler);<br>要缓存的内容</p>
<p>没错，加一个ob_gzhandler这个回调函数就可以了，不过这么做有些小问题，一是需要zlib支持，二是没有判断浏览器是否支持gzip（现在好像都支持，iphone浏览器好像都支持了）。<br>以前的做法是判断一下浏览器是否支持gzip，然后用第三方的gzip函数来压缩ob_get_contents() 的内容，最后echo。<br>一、ob系列函数中常用函数集锦<br>复制代码 代码如下:</p>
<p>ob_start();            //打开一个输出缓冲区，所有的输出信息不再直接发送到浏览器，而是保存在输出缓冲区里面。<br>ob_clean();            //删除内部缓冲区的内容，不关闭缓冲区(不输出)。<br>ob_end_clean();        //删除内部缓冲区的内容，关闭缓冲区(不输出)。<br>ob_get_clean();        //返回内部缓冲区的内容，关闭缓冲区。相当于执行 ob_get_contents() and ob_end_clean()<br>ob_flush();            //发送内部缓冲区的内容到浏览器，删除缓冲区的内容，不关闭缓冲区。<br>ob_end_flush();        //发送内部缓冲区的内容到浏览器，删除缓冲区的内容，关闭缓冲区。<br>ob_get_flush();        //返回内部缓冲区的内容，并关闭缓冲区，再释放缓冲区的内容。相当于ob_end_flush()并返回缓冲区内容。<br>flush();               //将ob_flush释放出来的内容，以及不在PHP缓冲区中的内容，全部输出至浏览器；刷新内部缓冲区的内容，并输出。<br>ob_get_contents();     //返回缓冲区的内容，不输出。<br>ob_get_length();       //返回内部缓冲区的长度，如果缓冲区未被激活，该函数返回FALSE。<br>ob_get_level();        //Return the nesting level of the output buffering mechanism.<br>ob_get_status();       //Get status of output buffers.<br>ob_implicit_flush();   //打开或关闭绝对刷新，默认为关闭，打开后ob_implicit_flush(true)，所谓绝对刷新，即当有输出语句(e.g: echo)被执行时，便把输出直接发送到浏览器，而不再需要调用flush()或等到脚本结束时才输出。<br>ob_gzhandler               //ob_start回调函数，用gzip压缩缓冲区的内容。<br>ob_list_handlers           //List all output handlers in use<br>output_add_rewrite_var     //Add URL rewriter values<br>output_reset_rewrite_vars  //Reset URL rewriter values<br>这些函数的行为受php_ini设置的影响：<br>output_buffering       //该值为ON时，将在所有脚本中使用输出控制；若该值为一个数字，则代表缓冲区的最大字节限制，当缓存内容达到该上限时将会自动向浏览器输出当前的缓冲区里的内容。<br>output_handler         //该选项可将脚本所有的输出，重定向到一个函数。例如，将 output_handler 设置为 mb_output_handler() 时，字符的编码将被修改为指定的编码。设置的任何处理函数，将自动的处理输出缓冲。<br>implicit_flush         //作用同ob_implicit_flush，默认为Off。<br>二、实例讲解<br>1、使 header() 函数前可以有echo代码<br>Output Control 函数可以让你自由控制脚本中数据的输出。它非常地有用，特别是对于：当你想在数据已经输出后，再输出文件头的情况。<br>输出控制函数不对使用 header() 或 setcookie()，发送的文件头信息产生影响，只对那些类似于 echo() 和 PHP 代码的数据块有作用。<br>复制代码 代码如下:<br>ob_start();                   //打开缓冲区<br>echo “Hello\n”;               //输出<br>header(“location:index.php”); //把浏览器重定向到index.php<br>ob_end_flush();               //输出全部内容到浏览器</p>
<p>所有对header()函数有了解的人都知道，这个函数会发送一段文件头给浏览器，但是如果在使用这个函数之前已经有了任何输出（包括空输出，比如空格，回车和换行）就会提示出错。如果我们去掉第一行的ob_start()，再执行此程序，我们会发现得到了一条错误提示：”Header had all ready send by”！但是加上ob_start，就不会提示出错，原因是当打开了缓冲区，echo后面的字符不会输出到浏览器，而是保留在服务器，直到你使用flush或者ob_end_flush才会输出，所以并不会有任何文件头输出的错误！<br>2、保存 phpinfo() 函数的输出<br>复制代码 代码如下:<br>ob_start();                      //打开缓冲区<br>phpinfo();                       //使用phpinfo函数<br>$info = ob_get_contents();       //得到缓冲区的内容并且赋值给$info<br>$file = fopen(‘info.txt’, ‘w’);  //打开文件info.txt<br>fwrite($file, $info);            //写入信息到info.txt<br>fclose($file);                   //关闭文件info.txt</p>
<p>3、静态模版技术<br>所谓静态模版技术就是通过某种方式，使得用户在client端得到的是由PHP产生的html页面。如果这个html页面不会再被更新，那么当另外的用户再次浏览此页面时，程序将不会再调用PHP以及相关的数据库，对于某些信息量比较大的网站，例如sina、163、sohu。类似这种的技术带来的好处是非常巨大的。<br>复制代码 代码如下:<br>ob_start();                            //打开缓冲区<br>php页面的全部输出<br>$content = ob_get_contents();          //取得php页面输出的全部内容<br>$fp = fopen(“output00001.html”, “w”);  //创建一个文件，并打开，准备写入<br>fwrite($fp, $content);                 //把php页面的内容全部写入output00001.html，然后……<br>fclose($fp);</p>
<p>三、输出缓存句柄ob_gzhandler<br>PHP4.0.4有一个新的输出缓存句柄ob_gzhandler，它与前面的类相似，但用法不同。使用ob_gzhandler时要在php.ini中加入的内容如下：<br>复制代码 代码如下:<br>output_handler = ob_gzhandler;</p>
<p>这行代码使得PHP激活输出缓存，并压缩它发送出去的所有内容。<br>如果由于某种原因你不想在php.ini中加上这行代码，你还可以通过PHP源文件所在目录的.htaccess文件改变默认的服务器行为（不压缩），语法如下：<br>复制代码 代码如下:<br>php_value output_handler ob_gzhandler</p>
<p>或者是从PHP代码调用，如下所示：<br>复制代码 代码如下:<br>ob_start(“ob_gzhandler”);</p>
<p>采用输出缓存句柄的方法确实非常有效，而且不会给服务器带来什么特殊的负荷。但必须注意的是，Netscape Communicator对压缩图形的支持不佳，因此除非你能够保证所有用户都使用IE浏览器，否则你应该禁止压缩JPEG和GIF图形。一般地，对于所有其他文件，这种压缩都有效，但建议你针对各种浏览器都分别进行测试，特别是当你使用了特殊的插件或者数据查看器时这一点尤其重要。<br>注意事项：<br>1、一些Web服务器的output_buffering默认是4069字符或者更大，即输出内容必须达到4069字符服务器才会flush刷新输出缓冲，为了确保flush有效，最好在ob_flush()函数前有以下语句：<br>复制代码 代码如下:<br>print str_repeat(“”, 4096);  //以确保到达output_buffering值</p>
<p>2、ob_* 系列函数是操作PHP本身的输出缓冲区，所以ob_flush只刷新PHP自身的缓冲区，而flush是刷新apache的缓冲区。所以，正确使用俩者的顺序是：先ob_flush，然后flush。ob_flush是把数据从PHP的缓冲中释放出来，flush是把缓冲内/外的数据全部发送到浏览器。<br>3、不要误认为用了ob_start()后，脚本的echo/print等输出就永远不会显示在浏览器上了。因为PHP脚本运行结束后，会自动刷新缓冲区并输出内容。</p>
<p>本文转自<a href="http://www.jb51.net/article/47951.htm" target="_blank" rel="external">http://www.jb51.net/article/47951.htm</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ob，输出缓冲区，是output buffering的简称，而不是output cache。ob用对了，是能对速度有一定的帮助，但是盲目的加上ob函数，只会增加CPU额外的负担&lt;br&gt;ob的基本原则：如果ob缓存打开，则echo的数据首先放在ob缓存。如果是header信息
    
    </summary>
    
      <category term="php" scheme="http://yoursite.com/categories/php/"/>
    
    
      <category term="php" scheme="http://yoursite.com/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>php类的自动加载</title>
    <link href="http://yoursite.com/2017/04/05/php%E7%B1%BB%E7%9A%84%E8%87%AA%E5%8A%A8%E5%8A%A0%E8%BD%BD/"/>
    <id>http://yoursite.com/2017/04/05/php类的自动加载/</id>
    <published>2017-04-05T15:24:00.000Z</published>
    <updated>2017-04-07T11:32:47.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="php加载文件的方式"><a href="#php加载文件的方式" class="headerlink" title="php加载文件的方式"></a>php加载文件的方式</h3><pre><code>1、include,inclde_once,require,require_once常规加载
2、__autoload()自动加载
3、spl_autoload_register()自动加载
</code></pre><h4 id="1、常规加载方式"><a href="#1、常规加载方式" class="headerlink" title="1、常规加载方式"></a>1、常规加载方式</h4><p>假如我们有一个类文件a.php,里面定义了一个名字为A的类<br>    &lt;?php<br>    class A{<br>        public function __construct(){<br>            echo ‘AAA’;<br>        }<br>    }<br>然后我们有一个index.php文件，要调用这个类A，常规做法：<br>    &lt;?php<br>    include(‘a.php’);<br>    $a = new A();<br>但是会存在一个问题，假如index.php文件里需要包含的不止是A类，而是需要很多类，那么就要写多次require语句。</p>
<h4 id="2、-autoload-加载方式"><a href="#2、-autoload-加载方式" class="headerlink" title="2、__autoload()加载方式"></a>2、__autoload()加载方式</h4><p>在php5版本后，当我们使用尚未定义的类的时候，会自动调用__autoload()函数来实现php的自动加载，而不是写长长的包含语句。<br>类似上文的index.php文件可以写成<br>    &lt;?php<br>    public function __autoload($class){<br>        $file = $class.’.php’;<br>    if(is_file($file)){<br>        require<em>once($file);<br>        }<br>    }<br>    $a = new A();<br>\</em>_autoload()函数会根据包含的路径寻找类文件并进行加载，我们可以根据自己的需要去定义自动加载的规则。ps:__autoload函数只能加载一次。</p>
<h4 id="3、spl-autoload-register-加载方式"><a href="#3、spl-autoload-register-加载方式" class="headerlink" title="3、spl_autoload_register()加载方式"></a>3、spl_autoload_register()加载方式</h4><p>那么问题来了，如果在一个系统中需要加载很多的类库，这些类库可能是由不同的开发人员编写的，其类名与实际的磁盘文件的映射规则不尽相同。这时如果要实现类库文件的自动加载，就必须在__autoload()函数中将所有的映射规则全部实现。<br>spl_autoload_register() 满足了此类需求。 它实际上创建了 autoload 函数的队列，按定义时的顺序逐个执行。相比之下， __autoload() 只可以定义一次。<br>    &lt;?php<br>    function loader($class){<br>      $file = $class . ‘.php’;<br>      if (is_file($file)) {<br>        require_once($file);<br>      }<br>    }<br>    spl_autoload_register(‘loader’);<br>    $a = new A();<br>或者使用匿名函数<br>    &lt;?php<br>    spl_autoload_register(function($file){<br>      $file = $class . ‘.php’;<br>      if (is_file($file)) {<br>        require_once($file);<br>      }<br>    });<br>    $a = new A();</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;php加载文件的方式&quot;&gt;&lt;a href=&quot;#php加载文件的方式&quot; class=&quot;headerlink&quot; title=&quot;php加载文件的方式&quot;&gt;&lt;/a&gt;php加载文件的方式&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;1、include,inclde_once,require,
    
    </summary>
    
    
      <category term="php" scheme="http://yoursite.com/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>vim快捷键</title>
    <link href="http://yoursite.com/2017/04/01/categories/"/>
    <id>http://yoursite.com/2017/04/01/categories/</id>
    <published>2017-04-01T07:18:16.000Z</published>
    <updated>2017-04-06T15:17:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>转载出处<a href="http://www.dabu.info/?p=801" target="_blank" rel="external">http://www.dabu.info/?p=801</a></p>
<p>Vim/Vi 没有菜单，只有命令</p>
<p>Vim/Vi 工作模式介绍：<br>插入模式 和  命令模式 是vi的两个基本模式。<br>——插入模式 ，是用来编写文本内容的。<br>——命令模式，是用来编辑文本，如上下翻页等，复制粘贴，跳转到指定行等操作<br>当前编辑的顶部或者底部会显示vim处于何种模式下。如：mode：COMMAND!</p>
<p>进入和退出vim编辑器：<br>进入   vi filename(要编辑的文件名字)———&gt;进入了命令模式<br>命令模式——&gt;输入  :wq——&gt;退出</p>
<p>保存退出<br>:wq      保存修改并退出<br>ZZ      快捷键，保存修改并退出(前面没有冒号)<br>:q!        不保存退出</p>
<p>:wq!    强行保存退出，(文件所属者科忽略文件的制度属性)<br>:w        保存不退出<br>:wqa     保存所有文件<br>:w  new_filename  另存为指定文件</p>
<p>vim配置文件    所在目录~/.vimrc<br>1.修改配置文件时，可以不用加：<br>2.可将编辑模式下的命令写在里面，每个命令单独一行，这样每次启动时，会自动执行里面的命令。</p>
<p>~   home directory<br>root   /root<br>users  /home     zhangsan   /home/zhamgsan</p>
<p>命令模式——&gt;输入i(或者ao) ——&gt; 插入模式<br>i     insert</p>
<p>还可以输入其他的字母，来进入插入模式：</p>
<hr>
<p>插入命令<br>命令                    作用<br>a                     在光标后附加文本<br>A                     在本行行末附加文本<br>i                     在光标前插入文本<br>I                     在本行开始插入文本<br>o (字母)              在光标下插入新行<br>O (字母)              在光标上插入新行</p>
<p>插入模式———&gt; ESc键———&gt;命令模式          <a href="http://www.dabu.info/?p=801" target="_blank" rel="external">http://www.dabu.info/?p=801</a><br>如果要保存文件，就要从插入模式切换为命令模式才行</p>
<p>命令模式——&gt;： ——&gt; 编辑模式<br>编辑模式———&gt;命令行回车结束运行——&gt;命令模式<br>在编辑模式执行完命令后，会自动回到命令模式</p>
<p>——————————————————————————————<br>定位命令<br>命令                        作用<br>h、方向左键            左移一个字符<br>j、 方向下键            下移一行<br>k、方向上键            上移一行<br>l、 方向右键            右移一个字符<br>$                           移至行尾<br>0                            移至行首</p>
<hr>
<p>H                            移至屏幕上端<br>M                            移至屏幕中央<br>L                            移至屏幕下端<br>(                        (左小括号)移动到上一个句子首<br>)                        (右小括号)移动到下一个句子首<br>{                        (左大括号)移动到上一个段落首<br>}                        (右大括号)移动到下一个段落首</p>
<p>快速定位,括号匹配, %<br>在command模式下。当文本中存在  (  ,{  ,[  ,等符号时可以通过输入  % (就是按shift键和数字5键)  来跳到括号对应的位置</p>
<p>[[                        光标跳转到代码块开头即{处,要求{独占一行<br>gD                        光标跳转到局部变量定义处<br>‘’                        (两个单引号)光标跳转到上次停靠处</p>
<p>————————————————————————————<br>快速定位   ,行头与行尾 0 与 $<br>在command模式下，<br>命令                                作用</p>
<p>0(数字0键)                            移至行首(把光标移至当前行的起始位置,第一个非空白字符之前，简单点说就是^ 的前面)<br>^(尖角号)                               把光标移至当前行的起始位置，也即当前行的第一个非空白字符位置</p>
<p><home> 移动到本行第一个字符。同0健。</home></p>
<p>$(就是按shift键和数字4键)            移至行尾<br>n$         移动到下面（包括光标所在行）n行的行尾。</p>
<p>—————————————————————————-<br>单个词组操作光标移动命令：</p>
<p>命令                        作用</p>
<p>W (大写)                       移动到下一个单词的首位置(如果连个单词直接有 逗号连接，则认为是一个单词)<br>w(小写)                            将光标右移一个单词的首位置。光标停留在下一个单词的首位置(两单词有逗号相连，则认为逗号也是一个单词)，注意：如果已到行尾，则转至下一行行首<br>nw                    向左移动n个单词，光标停在单词的首位置<br>e                        移动到单词末尾(把光标移至当前所在单词（或下一个单词）的最后一个字符位置)<br>ne                    和nw类似，只不过光标停留在单词的尾部<br>E                            和小写用法一样，只是以空格字符作为字的分隔符。<br>nE<br>b                        移动到单词的头部（如果光标已经在单词的头部，则将光标左移一个单词。光标停留在下一个单词的字首位置）<br>nb                    和nw类似，只不过这是向右移动<br>B         将光标左移一个单词，只是以空格字符作为字的分隔符。光标停留在下一个单词的单词首位置位置(如果连个单词直接有 逗号连接，则认为是一个单词)<br>nB</p>
<p>注意：上面这些命令都使用’iskeyword‘选项中的字符来确定单词的分界，还有几个命令，只把空白字符当做”单词“的分界。当然，这里说的” 单词“已经不是传统意义上的单词了，而是由非空白字符构成一串字串。命令”W“移动光标到下个字串的开始，命令”B“移动到上个字串的开始；命令”E“移 动到下个字串的结尾，命令”gE“移动到上个字串的结尾。和上面的命令比较一下，发现什么规律没有？</p>
<p>————————————————————————————<br>多个词组光标移动：<br>上面我们掌握了单个词组的移动，如果需要移动多个词组的光标，只需要在使用前加上要移动的词组的个数即可。一个英文字母的宽度是1，两个字母的宽度等于一个汉字的宽度。<br>举例如下：<br>Example : ABC   DEF   GHI   JKL   MNO   PQR   STUVW<br>假设光标现在处于Example的E处。并且vim处于command模式。那么我们先按 数字3键 ，再按w键。光标就会跳到JKL的J处。</p>
<p>————————————————————————-<br>vim重复输入文本：<br>举例：我们要输入gogogo。<br>方法如下：<br>vim在COMMAND模式下，先按数字3键，然后按 i键，在输入go，再按Esc键。就可以输入gogogo了。</p>
<p>还有，如将数字加在命令前,标示该命令处理几次,如5dd标示执行5次dd(删除光标所在整行)操作。<br>.   (英文句号）为命令重复命令，按下一次执行一次上一次执行过的命令。</p>
<p>————————————————————————————<br>快速定位,行头与行尾 0 与 $<br>在command模式下，<br>命令                                作用<br>$(就是按shift键和数字4键)            移至行尾<br>0(数字0键)                            移至行首(把光标移至当前行的起始位置,第一个非空白字符之前，简单点说就是^ 的前面)<br>^(尖角号)                               把光标移至当前行的起始位置，也即当前行的第一个非空白字符位置</p>
<p>————————————————————————————————<br>快速行定位，跳到指定的行, g 与 G</p>
<p>命令                        作用<br>：set nu                设置行号<br>：set nonu            去想行号</p>
<p>:set nu!                        取消显示行号<br>gg                        到第一行<br>G                            到最后一行<br>nG                        到第n行<br>:n                        到第n行</p>
<p>Ctrl + e 向下滚动一行</p>
<p>Ctrl + y 向上滚动一行</p>
<p>Ctrl + d 向下滚动半屏</p>
<p>Ctrl + u 向上滚动半屏</p>
<p>Ctrl + f 向下滚动一屏</p>
<p>Ctrl + b 向上滚动一屏</p>
<p>—————————————————————————-<br>快速定位，字母查找 f 与 F：<br>在command模式下，通过按  f 或者 F   快速定位内容。(不需要输入冒号)<br>命令                        作用<br>f                            想后查找<br>F                            向前查找<br>可以结合数字来进行多次查找，如按下  3fq   ,就会放下查找第三个q<br>如果不加数字，如   fq    ,就会向后查找第一个q</p>
<p>——————————————————–——————<br>查找光标下的相同词组, <em> 与 #<br>通过  </em>  ，可以往后查找光标停留位置相同的词组。  #  是向前超找<br>举例：假设光标停留在第一个if处<br>if  we are god   if you are human</p>
<p>我们在command模式下，输入  *  ，光标就会跳到“if you are human”的那个if上去</p>
<p>——————————————————————————————————————————————————————</p>
<p>字符替换<br>命令模式下<br>r                        (小写)替换光标所在处一个字符，如ra，就是将当前光标所在处字符替换为a<br>R                        (大写)开始替换,直到按ESC键退出替换,相当于按下键盘上到insert键<br>cc                        (小写)取代光标所在整行<br>S                        (大写)与ss(小写)效果相同<br>C                        (大写)取代到行尾,包括光标处字符<br>c0                        (小写,数字0)取代到行首,不包括光标处字符<br>c^                        (小写)与c0(小写,数字0)效果相同</p>
<p><strong>_字符串\单词搜索和替换命令<strong><strong><strong><strong><strong><strong><strong><strong><em>__</em></strong></strong></strong></strong></strong></strong></strong></strong></strong></p>
<p>#命令模式下</p>
<p>命令                            作用<br>/string                        向前搜索指定字符串</p>
<p>?string        从光标处开始向上开始查找字符从string<br>vim中有一些特殊字符在查找时需要转义　　.*[]^%/?~$<br>set  ic              查找时，忽略大小写<br>set noic         查找时，不忽略大小写<br>:nohlsearch　　关闭当前的高亮显示，如果再次搜索或者按下n或N键，则会再次高亮。</p>
<p>:set incsearch　　逐步搜索模式，对当前键入的字符进行搜索而不必等待键入完成。</p>
<p>:set wrapscan　　重新搜索，在搜索到文件头或尾时，返回继续搜索，默认开启。</p>
<p>n                                查找模式下，搜索指定字符串的下一个出现位置<br>N                                查找模式下，往上找指定字符串出现的位置<br>s/old/new/ 用old替换new，替换当前行的第一个匹配<br>s/old/new/g 用old替换new，替换当前行的所有匹配<br>:%s/old/new/                 用old替换new，替换所有行的第一个匹配<br>:%s/old/new/g            全文替换指定字符串<br>:n1 ,n2s/old/new/g    在一定范围内替换指定字符串<br>若将g改为c，就会询问是否替换。在替换文本old或new中有特殊字符，如“/”等，都需要用\进行转义</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;转载出处&lt;a href=&quot;http://www.dabu.info/?p=801&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.dabu.info/?p=801&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Vim/Vi 没有菜单，只有命令&lt;/p&gt;
&lt;p&gt;V
    
    </summary>
    
      <category term="编辑器" scheme="http://yoursite.com/categories/%E7%BC%96%E8%BE%91%E5%99%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>nginx初探</title>
    <link href="http://yoursite.com/2017/04/01/page/"/>
    <id>http://yoursite.com/2017/04/01/page/</id>
    <published>2017-04-01T07:18:16.000Z</published>
    <updated>2017-04-01T15:46:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>一、 概念<br>Nginx——Ngine X，是一款自由的、开源的、高性能HTTP服务器和反向代理服务器；也是一个IMAP、POP3、SMTP代理服务器；也就是说Nginx本身就可以托管网站（类似于Tomcat一样），进行Http服务处理，也可以作为反向代理服务器使用。</p>
<p>Nginx 解决了服务器的C10K（就是在一秒之内连接客户端的数目为10k即1万）问题。它的设计不像传统的服务器那样使用线程处理请求，而是一个更加高级的机制—事件驱动机制，是一种异步事件驱动结构。</p>
<p>虽然目前Nginx的份额在市场上只占很少部分，但是其高性能和低消耗内存的结构，使得其越来越普遍，典型的一个应用就是我们可以使用Nginx作为反向代理进行网站的负载均衡器。例如：Wordpress、GitHub等知名的网站都使用到了Nginx。</p>
<p>注：C10K问题可以参考：<br><a href="http://segmentfault.com/a/1190000000343620" target="_blank" rel="external">http://segmentfault.com/a/1190000000343620</a></p>
<p><a href="http://www.csdn.net/article/2013-05-16/2815317-The-Secret-to-10M-Concurrent-Connections" target="_blank" rel="external">http://www.csdn.net/article/2013-05-16/2815317-The-Secret-to-10M-Concurrent-Connections</a></p>
<p>二、 正向代理和反向代理<br>首先，代理服务器一般指局域网内部的机器通过代理服务器发送请求到互联网上的服务器，代理服务器一般作用在客户端。例如：GoAgent翻墙软件。我们的客户端在进行翻墙操作的时候，我们使用的正是正向代理，通过正向代理的方式，在我们的客户端运行一个软件，将我们的HTTP请求转发到其他不同的服务器端，实现请求的分发。</p>
<p>这里写图片描述</p>
<p>反向代理服务器作用在服务器端，它在服务器端接收客户端的请求，然后将请求分发给具体的服务器进行处理，然后再将服务器的相应结果反馈给客户端。Nginx就是一个反向代理服务器软件。</p>
<p>这里写图片描述</p>
<p>从上图可以看出：客户端必须设置正向代理服务器，当然前提是要知道正向代理服务器的IP地址，还有代理程序的端口。<br>反向代理正好与正向代理相反，对于客户端而言代理服务器就像是原始服务器，并且客户端不需要进行任何特别的设置。客户端向反向代理的命名空间（name-space）中的内容发送普通请求，接着反向代理将判断向何处（原始服务器）转交请求，并将获得的内容返回给客户端。</p>
<p>这里写图片描述</p>
<p>三、服务器的类型：<br>1、Web服务器：提供Http的访问，例如Nginx、Apache、IIS等，虽然Tomcat也能够实现，但这并不是他的主要功能，而且性能也远不如专门的Web服务器；<br>2、应用程序服务器：能够用于应用程序的运行；<br>3、代理服务器：代理服务器通常是客户端访问的一种行为，在整个客户端访问服务器的过程中有着重要的作用；<br>4、反向代理<br>5、后台服务器<br>6、CDN缓存服务器：它是缓存服务器的角色，而且是反向代理的应用，在网站部署的时候，他算是一种策略，对于远距离访问的解决方案。</p>
<p>四、 Nginx的特点<br>　　Ø 跨平台：可以在大多数Unix like 系统编译运行。而且也有Windows的移植版本。<br>Ø 配置异常简单：非常的简单，易上手。<br>Ø 非阻塞、高并发连接：数据复制时，磁盘I/O的第一阶段是非阻塞的。官方测试能支持5万并发连接，实际生产中能跑2~3万并发连接数（得益于Nginx采用了最新的epoll事件处理模型（消息队列）。<br>Ø Nginx代理和后端Web服务器间无需长连接；<br>Ø Nginx接收用户请求是异步的，即先将用户请求全部接收下来，再一次性发送到后端Web服务器，极大减轻后端Web服务器的压力。<br>Ø 发送响应报文时，是边接收来自后端Web服务器的数据，边发送给客户端。<br>Ø 网络依赖性低，理论上只要能够ping通就可以实施负载均衡，而且可以有效区分内网、外网流量。<br>Ø 支持内置服务器检测。Nginx能够根据应用服务器处理页面返回的状态码、超时信息等检测服务器是否出现故障，并及时返回错误的请求重新提交到其它节点上。<br>Ø 采用Master/worker多进程工作模式<br>Ø 此外还有内存消耗小、成本低廉（比F5硬件负载均衡器廉价太多）、节省带宽、稳定性高等特点。</p>
<p>五、Nginx的基本功能<br>Nginx的功能包括基本HTTP功能和扩展功能。和Apache服务器一样，Nginx服务器为了提供更多的功能并且能够有效地扩展这些功能。每一个模块都提供了一个功能，通过编译这些功能模块来实现功能的扩展。</p>
<p>1、基本HTTP功能</p>
<p>a）提供静态文件和index文件，处理静态文件，索引文件以及自动索引，打开文件描述符缓存； b）使用缓存加速反向代理，反向代理加速（无缓存），简单的负载均衡和容错； c）使用缓存机制加速远程FastCGI，简单的负载均衡和容错； d）模块化的结构。过滤器包括gzipping,byte ranges,chunked responses，以及 SSI-filter。在SSI过滤器中，到同一个 proxy 或者 FastCGI 的多个子请求并发处理； e）支持SSL 和 TLS SNI 支持； f）IMAP/POP3代理服务功能； g）使用外部 HTTP 认证服务器重定向用户到 IMAP/POP3 后端； h）使用外部 HTTP 认证服务器认证用户后连接重定向到内部的 SMTP 后端；<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>2、其他HTTP功能</p>
<p>a）基于名称和基于IP的虚拟服务器； b）支持Keep-alive和管道连接； c）灵活的配置和重新配置、在线升级的时候不用中断客户访问的处理； d）访问日志的格式，缓存日志写入和快速日志轮循； e）3xx-5xx错误代码重定向； f）速度限制<br>1<br>2<br>3<br>4<br>5<br>6<br>六、Nginx的基本模块<br>Nginx的核心模块包括内核模块和事件驱动模块，即：CoreModule和EventsModule；另外还有第三方模块 HTTP内核模块，HttpCoreModule，它是Nginx服务器的核心模块。</p>
<p>CoreModule和EventsModule模块的配置相对于HttpCoreModule会少一些，但是它们的配置将会影响系统的性能，而非功能上的差异。</p>
<p>1、CoreModule用于控制Nginx服务器的基本功能；<br>2、EventsModule用于控制Nginx如何处理连接。该模块的指令的一些参数会对应用系统的性能产生重要的影响；<br>3、HttpCoreModule提供HTTP访问Nginx服务器，该模块是不能缺少的。</p>
<p>七、 内部进程模型<br>这里写图片描述</p>
<p>Nginx是以多进程的方式来工作的，当然Nginx也是支持多线程的方式的,只是我们主流的方式还是多进程的方式，也是Nginx的默认方式。Nginx采用多进程的方式有诸多好处。</p>
<p>Nginx在启动后，会有一个master进程和多个worker进程。master进程主要用来管理worker进程，包含：接收来自外界的信号，向各worker进程发送信号，监控 worker进程的运行状态,当worker进程退出后(异常情况下)，会自动重新启动新的worker进程。而基本的网络事件，则是放在worker进程中来处理了。多个worker进程之间是对等的，他们同等竞争来自客户端的请求，各进程互相之间是独立的。一个请求，只可能在一个worker进程中处理，一个worker进程，不可能处理其它进程的请求。worker进程的个数是可以设置的，一般我们会设置与机器CPU核数一致，这里面的原因与Nginx的进程模型以及事件处理模型是分不开的。</p>
<p>八、 处理请求<br>　　首先，Nginx在启动时，会解析配置文件，得到需要监听的端口与IP地址，然后在Nginx的master进程里面，先初始化好这个监控的socket(创建socket，设置addrreuse等选项，绑定到指定的IP地址端口，再listen)，然后再fork(一个现有进程可以调用fork函数创建一个新进程。由fork创建的新进程被称为子进程 )出多个子进程出来，然后子进程会竞争accept新的连接。<br>此时，客户端就可以向Nginx发起连接了。当客户端与Nginx进行三次握手，与Nginx建立好一个连接后，某一个子进程会accept成功，得到这个建立好的连接的socket，然后创建Nginx对连接的封装，即ngx_connection_t结构体。<br>接着，设置读写事件处理函数并添加读写事件来与客户端进行数据的交换。最后，Nginx或客户端来主动关掉连接，到此，一个连接就寿终正寝了。</p>
<p>九、 实际应用<br>由于Nginx是由俄罗斯人写的，所以，Nginx 已经在俄罗斯最大的门户网站── Rambler Media（www.rambler.ru）上运行了3年时间，同时俄罗斯超过20%的虚拟主机平台采用Nginx作为反向代理服务器。</p>
<p>在国内，已经有淘宝、新浪博客、新浪播客、网易新闻、六间房、56.com、Discuz!、水木社区、豆瓣、YUPOO、海内、迅雷在线等多家网站使用 Nginx 作为Web服务器或反向代理服务器。</p>
<p>这里写图片描述</p>
<p>在近期一些项目的开发过程中，主要是使用Nginx和Tomcat来搭建高性能负载均衡集群，即使用Nginx的反向代理功能来实现请求的分发，关于Nginx和Tomcat的组合使用，不在这里重复造轮子，请参考免费文档：<br><a href="http://download.csdn.net/detail/u010870518/9261395" target="_blank" rel="external">http://download.csdn.net/detail/u010870518/9261395</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一、 概念&lt;br&gt;Nginx——Ngine X，是一款自由的、开源的、高性能HTTP服务器和反向代理服务器；也是一个IMAP、POP3、SMTP代理服务器；也就是说Nginx本身就可以托管网站（类似于Tomcat一样），进行Http服务处理，也可以作为反向代理服务器使用。&lt;
    
    </summary>
    
    
      <category term="nginx" scheme="http://yoursite.com/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2017/03/31/hello-world/"/>
    <id>http://yoursite.com/2017/03/31/hello-world/</id>
    <published>2017-03-31T14:06:15.000Z</published>
    <updated>2017-03-31T15:41:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
</feed>
