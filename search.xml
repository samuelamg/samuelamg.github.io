<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[nginx初探]]></title>
      <url>%2F2017%2F04%2F01%2Fpage%2F</url>
      <content type="text"><![CDATA[一、 概念Nginx——Ngine X，是一款自由的、开源的、高性能HTTP服务器和反向代理服务器；也是一个IMAP、POP3、SMTP代理服务器；也就是说Nginx本身就可以托管网站（类似于Tomcat一样），进行Http服务处理，也可以作为反向代理服务器使用。 Nginx 解决了服务器的C10K（就是在一秒之内连接客户端的数目为10k即1万）问题。它的设计不像传统的服务器那样使用线程处理请求，而是一个更加高级的机制—事件驱动机制，是一种异步事件驱动结构。 虽然目前Nginx的份额在市场上只占很少部分，但是其高性能和低消耗内存的结构，使得其越来越普遍，典型的一个应用就是我们可以使用Nginx作为反向代理进行网站的负载均衡器。例如：Wordpress、GitHub等知名的网站都使用到了Nginx。 注：C10K问题可以参考：http://segmentfault.com/a/1190000000343620 http://www.csdn.net/article/2013-05-16/2815317-The-Secret-to-10M-Concurrent-Connections 二、 正向代理和反向代理首先，代理服务器一般指局域网内部的机器通过代理服务器发送请求到互联网上的服务器，代理服务器一般作用在客户端。例如：GoAgent翻墙软件。我们的客户端在进行翻墙操作的时候，我们使用的正是正向代理，通过正向代理的方式，在我们的客户端运行一个软件，将我们的HTTP请求转发到其他不同的服务器端，实现请求的分发。 这里写图片描述 反向代理服务器作用在服务器端，它在服务器端接收客户端的请求，然后将请求分发给具体的服务器进行处理，然后再将服务器的相应结果反馈给客户端。Nginx就是一个反向代理服务器软件。 这里写图片描述 从上图可以看出：客户端必须设置正向代理服务器，当然前提是要知道正向代理服务器的IP地址，还有代理程序的端口。反向代理正好与正向代理相反，对于客户端而言代理服务器就像是原始服务器，并且客户端不需要进行任何特别的设置。客户端向反向代理的命名空间（name-space）中的内容发送普通请求，接着反向代理将判断向何处（原始服务器）转交请求，并将获得的内容返回给客户端。 这里写图片描述 三、服务器的类型：1、Web服务器：提供Http的访问，例如Nginx、Apache、IIS等，虽然Tomcat也能够实现，但这并不是他的主要功能，而且性能也远不如专门的Web服务器；2、应用程序服务器：能够用于应用程序的运行；3、代理服务器：代理服务器通常是客户端访问的一种行为，在整个客户端访问服务器的过程中有着重要的作用；4、反向代理5、后台服务器6、CDN缓存服务器：它是缓存服务器的角色，而且是反向代理的应用，在网站部署的时候，他算是一种策略，对于远距离访问的解决方案。 四、 Nginx的特点 Ø 跨平台：可以在大多数Unix like 系统编译运行。而且也有Windows的移植版本。Ø 配置异常简单：非常的简单，易上手。Ø 非阻塞、高并发连接：数据复制时，磁盘I/O的第一阶段是非阻塞的。官方测试能支持5万并发连接，实际生产中能跑2~3万并发连接数（得益于Nginx采用了最新的epoll事件处理模型（消息队列）。Ø Nginx代理和后端Web服务器间无需长连接；Ø Nginx接收用户请求是异步的，即先将用户请求全部接收下来，再一次性发送到后端Web服务器，极大减轻后端Web服务器的压力。Ø 发送响应报文时，是边接收来自后端Web服务器的数据，边发送给客户端。Ø 网络依赖性低，理论上只要能够ping通就可以实施负载均衡，而且可以有效区分内网、外网流量。Ø 支持内置服务器检测。Nginx能够根据应用服务器处理页面返回的状态码、超时信息等检测服务器是否出现故障，并及时返回错误的请求重新提交到其它节点上。Ø 采用Master/worker多进程工作模式Ø 此外还有内存消耗小、成本低廉（比F5硬件负载均衡器廉价太多）、节省带宽、稳定性高等特点。 五、Nginx的基本功能Nginx的功能包括基本HTTP功能和扩展功能。和Apache服务器一样，Nginx服务器为了提供更多的功能并且能够有效地扩展这些功能。每一个模块都提供了一个功能，通过编译这些功能模块来实现功能的扩展。 1、基本HTTP功能 a）提供静态文件和index文件，处理静态文件，索引文件以及自动索引，打开文件描述符缓存； b）使用缓存加速反向代理，反向代理加速（无缓存），简单的负载均衡和容错； c）使用缓存机制加速远程FastCGI，简单的负载均衡和容错； d）模块化的结构。过滤器包括gzipping,byte ranges,chunked responses，以及 SSI-filter。在SSI过滤器中，到同一个 proxy 或者 FastCGI 的多个子请求并发处理； e）支持SSL 和 TLS SNI 支持； f）IMAP/POP3代理服务功能； g）使用外部 HTTP 认证服务器重定向用户到 IMAP/POP3 后端； h）使用外部 HTTP 认证服务器认证用户后连接重定向到内部的 SMTP 后端；123456782、其他HTTP功能 a）基于名称和基于IP的虚拟服务器； b）支持Keep-alive和管道连接； c）灵活的配置和重新配置、在线升级的时候不用中断客户访问的处理； d）访问日志的格式，缓存日志写入和快速日志轮循； e）3xx-5xx错误代码重定向； f）速度限制123456六、Nginx的基本模块Nginx的核心模块包括内核模块和事件驱动模块，即：CoreModule和EventsModule；另外还有第三方模块 HTTP内核模块，HttpCoreModule，它是Nginx服务器的核心模块。 CoreModule和EventsModule模块的配置相对于HttpCoreModule会少一些，但是它们的配置将会影响系统的性能，而非功能上的差异。 1、CoreModule用于控制Nginx服务器的基本功能；2、EventsModule用于控制Nginx如何处理连接。该模块的指令的一些参数会对应用系统的性能产生重要的影响；3、HttpCoreModule提供HTTP访问Nginx服务器，该模块是不能缺少的。 七、 内部进程模型这里写图片描述 Nginx是以多进程的方式来工作的，当然Nginx也是支持多线程的方式的,只是我们主流的方式还是多进程的方式，也是Nginx的默认方式。Nginx采用多进程的方式有诸多好处。 Nginx在启动后，会有一个master进程和多个worker进程。master进程主要用来管理worker进程，包含：接收来自外界的信号，向各worker进程发送信号，监控 worker进程的运行状态,当worker进程退出后(异常情况下)，会自动重新启动新的worker进程。而基本的网络事件，则是放在worker进程中来处理了。多个worker进程之间是对等的，他们同等竞争来自客户端的请求，各进程互相之间是独立的。一个请求，只可能在一个worker进程中处理，一个worker进程，不可能处理其它进程的请求。worker进程的个数是可以设置的，一般我们会设置与机器CPU核数一致，这里面的原因与Nginx的进程模型以及事件处理模型是分不开的。 八、 处理请求 首先，Nginx在启动时，会解析配置文件，得到需要监听的端口与IP地址，然后在Nginx的master进程里面，先初始化好这个监控的socket(创建socket，设置addrreuse等选项，绑定到指定的IP地址端口，再listen)，然后再fork(一个现有进程可以调用fork函数创建一个新进程。由fork创建的新进程被称为子进程 )出多个子进程出来，然后子进程会竞争accept新的连接。此时，客户端就可以向Nginx发起连接了。当客户端与Nginx进行三次握手，与Nginx建立好一个连接后，某一个子进程会accept成功，得到这个建立好的连接的socket，然后创建Nginx对连接的封装，即ngx_connection_t结构体。接着，设置读写事件处理函数并添加读写事件来与客户端进行数据的交换。最后，Nginx或客户端来主动关掉连接，到此，一个连接就寿终正寝了。 九、 实际应用由于Nginx是由俄罗斯人写的，所以，Nginx 已经在俄罗斯最大的门户网站── Rambler Media（www.rambler.ru）上运行了3年时间，同时俄罗斯超过20%的虚拟主机平台采用Nginx作为反向代理服务器。 在国内，已经有淘宝、新浪博客、新浪播客、网易新闻、六间房、56.com、Discuz!、水木社区、豆瓣、YUPOO、海内、迅雷在线等多家网站使用 Nginx 作为Web服务器或反向代理服务器。 这里写图片描述 在近期一些项目的开发过程中，主要是使用Nginx和Tomcat来搭建高性能负载均衡集群，即使用Nginx的反向代理功能来实现请求的分发，关于Nginx和Tomcat的组合使用，不在这里重复造轮子，请参考免费文档：http://download.csdn.net/detail/u010870518/9261395]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[vim快捷键]]></title>
      <url>%2F2017%2F04%2F01%2Fcategories%2F</url>
      <content type="text"><![CDATA[转载出处http://www.dabu.info/?p=801 Vim/Vi 没有菜单，只有命令 Vim/Vi 工作模式介绍：插入模式 和 命令模式 是vi的两个基本模式。——插入模式 ，是用来编写文本内容的。——命令模式，是用来编辑文本，如上下翻页等，复制粘贴，跳转到指定行等操作当前编辑的顶部或者底部会显示vim处于何种模式下。如：mode：COMMAND! 进入和退出vim编辑器：进入 vi filename(要编辑的文件名字)———&gt;进入了命令模式命令模式——&gt;输入 :wq——&gt;退出 保存退出:wq 保存修改并退出ZZ 快捷键，保存修改并退出(前面没有冒号):q! 不保存退出 :wq! 强行保存退出，(文件所属者科忽略文件的制度属性):w 保存不退出:wqa 保存所有文件:w new_filename 另存为指定文件 vim配置文件 所在目录~/.vimrc1.修改配置文件时，可以不用加：2.可将编辑模式下的命令写在里面，每个命令单独一行，这样每次启动时，会自动执行里面的命令。 ~ home directoryroot /rootusers /home zhangsan /home/zhamgsan 命令模式——&gt;输入i(或者ao) ——&gt; 插入模式i insert 还可以输入其他的字母，来进入插入模式： 插入命令命令 作用a 在光标后附加文本A 在本行行末附加文本i 在光标前插入文本I 在本行开始插入文本o (字母) 在光标下插入新行O (字母) 在光标上插入新行 插入模式———&gt; ESc键———&gt;命令模式 http://www.dabu.info/?p=801如果要保存文件，就要从插入模式切换为命令模式才行 命令模式——&gt;： ——&gt; 编辑模式编辑模式———&gt;命令行回车结束运行——&gt;命令模式在编辑模式执行完命令后，会自动回到命令模式 ——————————————————————————————定位命令命令 作用h、方向左键 左移一个字符j、 方向下键 下移一行k、方向上键 上移一行l、 方向右键 右移一个字符$ 移至行尾0 移至行首 H 移至屏幕上端M 移至屏幕中央L 移至屏幕下端( (左小括号)移动到上一个句子首) (右小括号)移动到下一个句子首{ (左大括号)移动到上一个段落首} (右大括号)移动到下一个段落首 快速定位,括号匹配, %在command模式下。当文本中存在 ( ,{ ,[ ,等符号时可以通过输入 % (就是按shift键和数字5键) 来跳到括号对应的位置 [[ 光标跳转到代码块开头即{处,要求{独占一行gD 光标跳转到局部变量定义处‘’ (两个单引号)光标跳转到上次停靠处 ————————————————————————————快速定位 ,行头与行尾 0 与 $在command模式下，命令 作用 0(数字0键) 移至行首(把光标移至当前行的起始位置,第一个非空白字符之前，简单点说就是^ 的前面)^(尖角号) 把光标移至当前行的起始位置，也即当前行的第一个非空白字符位置 移动到本行第一个字符。同0健。 $(就是按shift键和数字4键) 移至行尾n$ 移动到下面（包括光标所在行）n行的行尾。 —————————————————————————-单个词组操作光标移动命令： 命令 作用 W (大写) 移动到下一个单词的首位置(如果连个单词直接有 逗号连接，则认为是一个单词)w(小写) 将光标右移一个单词的首位置。光标停留在下一个单词的首位置(两单词有逗号相连，则认为逗号也是一个单词)，注意：如果已到行尾，则转至下一行行首nw 向左移动n个单词，光标停在单词的首位置e 移动到单词末尾(把光标移至当前所在单词（或下一个单词）的最后一个字符位置)ne 和nw类似，只不过光标停留在单词的尾部E 和小写用法一样，只是以空格字符作为字的分隔符。nEb 移动到单词的头部（如果光标已经在单词的头部，则将光标左移一个单词。光标停留在下一个单词的字首位置）nb 和nw类似，只不过这是向右移动B 将光标左移一个单词，只是以空格字符作为字的分隔符。光标停留在下一个单词的单词首位置位置(如果连个单词直接有 逗号连接，则认为是一个单词)nB 注意：上面这些命令都使用’iskeyword‘选项中的字符来确定单词的分界，还有几个命令，只把空白字符当做”单词“的分界。当然，这里说的” 单词“已经不是传统意义上的单词了，而是由非空白字符构成一串字串。命令”W“移动光标到下个字串的开始，命令”B“移动到上个字串的开始；命令”E“移 动到下个字串的结尾，命令”gE“移动到上个字串的结尾。和上面的命令比较一下，发现什么规律没有？ ————————————————————————————多个词组光标移动：上面我们掌握了单个词组的移动，如果需要移动多个词组的光标，只需要在使用前加上要移动的词组的个数即可。一个英文字母的宽度是1，两个字母的宽度等于一个汉字的宽度。举例如下：Example : ABC DEF GHI JKL MNO PQR STUVW假设光标现在处于Example的E处。并且vim处于command模式。那么我们先按 数字3键 ，再按w键。光标就会跳到JKL的J处。 ————————————————————————-vim重复输入文本：举例：我们要输入gogogo。方法如下：vim在COMMAND模式下，先按数字3键，然后按 i键，在输入go，再按Esc键。就可以输入gogogo了。 还有，如将数字加在命令前,标示该命令处理几次,如5dd标示执行5次dd(删除光标所在整行)操作。. (英文句号）为命令重复命令，按下一次执行一次上一次执行过的命令。 ————————————————————————————快速定位,行头与行尾 0 与 $在command模式下，命令 作用$(就是按shift键和数字4键) 移至行尾0(数字0键) 移至行首(把光标移至当前行的起始位置,第一个非空白字符之前，简单点说就是^ 的前面)^(尖角号) 把光标移至当前行的起始位置，也即当前行的第一个非空白字符位置 ————————————————————————————————快速行定位，跳到指定的行, g 与 G 命令 作用：set nu 设置行号：set nonu 去想行号 :set nu! 取消显示行号gg 到第一行G 到最后一行nG 到第n行:n 到第n行 Ctrl + e 向下滚动一行 Ctrl + y 向上滚动一行 Ctrl + d 向下滚动半屏 Ctrl + u 向上滚动半屏 Ctrl + f 向下滚动一屏 Ctrl + b 向上滚动一屏 —————————————————————————-快速定位，字母查找 f 与 F：在command模式下，通过按 f 或者 F 快速定位内容。(不需要输入冒号)命令 作用f 想后查找F 向前查找可以结合数字来进行多次查找，如按下 3fq ,就会放下查找第三个q如果不加数字，如 fq ,就会向后查找第一个q ——————————————————–——————查找光标下的相同词组, 与 #通过 ，可以往后查找光标停留位置相同的词组。 # 是向前超找举例：假设光标停留在第一个if处if we are god if you are human 我们在command模式下，输入 * ，光标就会跳到“if you are human”的那个if上去 —————————————————————————————————————————————————————— 字符替换命令模式下r (小写)替换光标所在处一个字符，如ra，就是将当前光标所在处字符替换为aR (大写)开始替换,直到按ESC键退出替换,相当于按下键盘上到insert键cc (小写)取代光标所在整行S (大写)与ss(小写)效果相同C (大写)取代到行尾,包括光标处字符c0 (小写,数字0)取代到行首,不包括光标处字符c^ (小写)与c0(小写,数字0)效果相同 _字符串\单词搜索和替换命令__ #命令模式下 命令 作用/string 向前搜索指定字符串 ?string 从光标处开始向上开始查找字符从stringvim中有一些特殊字符在查找时需要转义 .*[]^%/?~$set ic 查找时，忽略大小写set noic 查找时，不忽略大小写:nohlsearch 关闭当前的高亮显示，如果再次搜索或者按下n或N键，则会再次高亮。 :set incsearch 逐步搜索模式，对当前键入的字符进行搜索而不必等待键入完成。 :set wrapscan 重新搜索，在搜索到文件头或尾时，返回继续搜索，默认开启。 n 查找模式下，搜索指定字符串的下一个出现位置N 查找模式下，往上找指定字符串出现的位置s/old/new/ 用old替换new，替换当前行的第一个匹配s/old/new/g 用old替换new，替换当前行的所有匹配:%s/old/new/ 用old替换new，替换所有行的第一个匹配:%s/old/new/g 全文替换指定字符串:n1 ,n2s/old/new/g 在一定范围内替换指定字符串若将g改为c，就会询问是否替换。在替换文本old或new中有特殊字符，如“/”等，都需要用\进行转义]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>%2F2017%2F03%2F31%2Fhello-world%2F</url>
      <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
    </entry>

    
  
  
</search>
